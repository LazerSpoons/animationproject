import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Graphics;

public class PongBall {
	private double x; // x-coordinate of the center of the ball
	private double y; // y-coordinate of the center of the ball
	private double diameter; // diameter of the ball
	private double radius; // radius of the ball
	private Color color; // color of the ball
	private double xSpeed; // x-speed = change in x-position
	private double ySpeed;
	private int touches;

	public PongBall() {
		this.x = 300;
		this.y = 300;
		this.diameter = 25;
		this.radius = diameter / 2;
		this.color = Color.BLUE;
		this.xSpeed = 0;
		this.ySpeed = 0;
	}

	public PongBall(double x, double y, double diameter, Color color) {
		this.x = x;
		this.y = y;
		this.diameter = diameter;
		this.radius = diameter / 2;
		this.color = color;
		this.xSpeed = 0;
		this.ySpeed = 0;
	}

	public double getX() {
		return x;
	}

	public double getY() {
		return y;
	}

	public double getDiameter() {
		return diameter;
	}

	public double getRadius() {
		return radius;
	}

	public double getXSpeed() {
		return xSpeed;
	}

	public double getYSpeed() {
		return ySpeed;
	}

	public Color getColor() {
		return color;

	}

	public void setColor(Color color) {
		this.color = color;

	}

	public void setX(double x) {
		this.x = x;
	}

	public void setY(double y) {
		this.y = y;
	}

	public void setDiameter(double diameter) {
		this.diameter = diameter;
		this.radius = diameter / 2;
	}

	public void setRadius(double radius) {
		this.radius = radius;
		this.diameter = radius * 2;
	}

	public void setXSpeed(double xSpeed) {
		this.xSpeed = xSpeed;
	}

	public void setYSpeed(double ySpeed) {
		this.ySpeed = ySpeed;
	}

	public void draw(Graphics g) {
		g.setColor(color);
		g.fillOval((int) x - (int) radius, (int) y - (int) radius, (int) diameter, (int) diameter);

	}

	public void setLocation(double x, double y) {
		this.x = x;
		this.y = y;

	}

	public double findDistanceFrom(double x2, double y2) {
		return Math.sqrt(Math.pow((x2 - getX()), 2) + Math.pow((y2 - getY()), 2));
	}

	public int FindX(Paddle Paddle) {
		int ax = (int) (Paddle.getX() + 30);

		return ax;

	}

	   public Rectangle getBounds() {
	        return new Rectangle((int)x, (int)y, 30, 30);
	    }

	public boolean intersectsWith(Paddle Paddle) {
		/*int b = 0;
		int x = (int) (getX() - getRadius());
		

		for (int i = 0; i < 250; i++) {

			if (x <=  Paddle.getX() && x == Paddle.getY() - i)  {
				b++;
				touches++;
				break;
			}

		}
		if (b > 0) {
			return true;
		}


		return false;
		
		
	}
	
*/
	if(Paddle.getBounds().intersects(getBounds())){
		return true;
	}
	
	return false;
	}
	public boolean intersectsWith1(Paddle Paddle) {
		if(Paddle.getBounds1().intersects(getBounds())){
			return true;
		}
		
		return false;
		}

	
		
	public void move(int rightEdge, int bottomEdge) {
		x += xSpeed;
		y += ySpeed;
		if (y + radius >= bottomEdge) {
			ySpeed *= -1;
			y = bottomEdge - radius;
		}
		if (y - radius <= 0) {
			ySpeed *= -1;
			y = 0 + radius;
		}
	}
}
